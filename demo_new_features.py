#!/usr/bin/env python3
"""
Demo script showcasing all new features
Crypto Prediction App - Multi-Timeframe Analysis
"""

from enhanced_app_v2 import EnhancedCryptoPredictionAppV2
from colorama import Fore, Style
import time

def demo_header():
    print(f"{Fore.CYAN}{Style.BRIGHT}")
    print("=" * 80)
    print("        üöÄ CRYPTO PREDICTION APP - MULTI-TIMEFRAME ANALYSIS üöÄ")
    print("=" * 80)
    print(f"{Style.RESET_ALL}")
    print(f"{Fore.GREEN}‚ú® NEW FEATURES:{Style.RESET_ALL}")
    print(f"   ‚Ä¢ 3 ki·ªÉu ƒë·∫ßu t∆∞: 60m (Scalping), 4h (Swing), 1d (Position)")
    print(f"   ‚Ä¢ 3 c·∫∑p coin m·ªõi: LINKJPY, SOLJPY, ETHJPY")
    print(f"   ‚Ä¢ T·ªïng c·ªông 7 c·∫∑p: XRPJPY, XLMJPY, ADAJPY, SUIJPY, LINKJPY, SOLJPY, ETHJPY")
    print(f"   ‚Ä¢ TP/SL ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh theo th·ªùi gian gi·ªØ l·ªánh")
    print(f"   ‚Ä¢ Ph√¢n t√≠ch ƒëa khung th·ªùi gian t·ª± ƒë·ªông")
    print()

def demo_single_investment_types():
    """Demo t·ª´ng ki·ªÉu ƒë·∫ßu t∆∞ ri√™ng bi·ªát"""
    print(f"{Fore.YELLOW}{Style.BRIGHT}üìä DEMO: PH√ÇN T√çCH T·ª™NG KI·ªÇU ƒê·∫¶U T∆Ø{Style.RESET_ALL}")
    print("-" * 60)
    
    app = EnhancedCryptoPredictionAppV2()
    
    investment_types = {
        '60m': 'üî• SCALPING (60 ph√∫t)',
        '4h': 'üìà SWING (4 gi·ªù)', 
        '1d': 'üéØ POSITION (1 ng√†y)'
    }
    
    for inv_type, description in investment_types.items():
        print(f"\n{Fore.MAGENTA}{description}{Style.RESET_ALL}")
        print("=" * 40)
        
        # Ph√¢n t√≠ch SOLJPY cho m·ªói ki·ªÉu
        result = app.analyze_single_pair_by_investment_type('SOLJPY', inv_type)
        
        if result:
            print(f"Coin: {Fore.CYAN}SOLJPY{Style.RESET_ALL}")
            print(f"Khung th·ªùi gian ph√¢n t√≠ch: {Fore.MAGENTA}{result['timeframe']}{Style.RESET_ALL}")
            print(f"Th·ªùi gian gi·ªØ l·ªánh: {Fore.YELLOW}{result['hold_duration']}{Style.RESET_ALL}")
            print(f"T√≠n hi·ªáu: {Fore.GREEN if result['signal_type'] == 'BUY' else Fore.RED}{result['signal_type']}{Style.RESET_ALL}")
            print(f"X√°c su·∫•t: {Fore.YELLOW}{result['success_probability']:.1%}{Style.RESET_ALL}")
            
            if result['signal_type'] == 'BUY':
                tp1_pct = ((result['tp1']/result['entry_price']-1)*100)
                tp2_pct = ((result['tp2']/result['entry_price']-1)*100)
                sl_pct = ((1-result['stop_loss']/result['entry_price'])*100)
                
                print(f"TP1: +{tp1_pct:.2f}% | TP2: +{tp2_pct:.2f}% | SL: -{sl_pct:.2f}%")
                
                # Advice based on investment type
                if inv_type == '60m':
                    print(f"{Fore.BLUE}üí° L∆∞·ªõt s√≥ng nhanh, ch·ªët l·ªùi/l·ªó trong 1 gi·ªù{Style.RESET_ALL}")
                elif inv_type == '4h':
                    print(f"{Fore.BLUE}üí° Swing trading, gi·ªØ 2-4 gi·ªù{Style.RESET_ALL}")
                elif inv_type == '1d':
                    print(f"{Fore.BLUE}üí° ƒê·∫ßu t∆∞ v·ªã th·∫ø, gi·ªØ 8-24 gi·ªù{Style.RESET_ALL}")
        
        time.sleep(1)  # Pause ƒë·ªÉ d·ªÖ theo d√µi

def demo_new_pairs():
    """Demo c√°c c·∫∑p coin m·ªõi"""
    print(f"\n{Fore.YELLOW}{Style.BRIGHT}üÜï DEMO: C√ÅC C·∫∂P COIN M·ªöI{Style.RESET_ALL}")
    print("-" * 60)
    
    app = EnhancedCryptoPredictionAppV2()
    new_pairs = ['LINKJPY', 'SOLJPY', 'ETHJPY']
    
    print(f"Ph√¢n t√≠ch nhanh 3 c·∫∑p coin m·ªõi cho ki·ªÉu ƒë·∫ßu t∆∞ {Fore.CYAN}60m{Style.RESET_ALL}:")
    print()
    
    for i, pair in enumerate(new_pairs, 1):
        result = app.analyze_single_pair_by_investment_type(pair, '60m')
        
        if result:
            signal_color = Fore.GREEN if result['signal_type'] == 'BUY' else Fore.YELLOW
            quality_color = Fore.GREEN if result['entry_quality'] == 'HIGH' else Fore.YELLOW if result['entry_quality'] == 'MEDIUM' else Fore.RED
            
            print(f"{i}. {Fore.CYAN}{pair}{Style.RESET_ALL}")
            print(f"   T√≠n hi·ªáu: {signal_color}{result['signal_type']}{Style.RESET_ALL}")
            print(f"   X√°c su·∫•t: {Fore.YELLOW}{result['success_probability']:.1%}{Style.RESET_ALL}")
            print(f"   Ch·∫•t l∆∞·ª£ng: {quality_color}{result['entry_quality']}{Style.RESET_ALL}")
            print(f"   Gi√° hi·ªán t·∫°i: {Fore.YELLOW}{result['current_price']:,.0f}{Style.RESET_ALL}")
            
            if result['signal_type'] == 'BUY':
                tp1_pct = ((result['tp1']/result['entry_price']-1)*100)
                print(f"   L√£i d·ª± ki·∫øn (TP1): {Fore.GREEN}+{tp1_pct:.2f}%{Style.RESET_ALL}")
            print()

def demo_usage_instructions():
    """H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"""
    print(f"\n{Fore.YELLOW}{Style.BRIGHT}üìö H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG{Style.RESET_ALL}")
    print("-" * 60)
    
    print(f"{Fore.WHITE}üîπ Ch·∫°y ph√¢n t√≠ch c∆° b·∫£n (60m):{Style.RESET_ALL}")
    print(f"   python3 enhanced_app_v2.py")
    print()
    
    print(f"{Fore.WHITE}üîπ Ch·∫°y ph√¢n t√≠ch t·∫•t c·∫£ khung th·ªùi gian:{Style.RESET_ALL}")
    print(f"   python3 enhanced_app_v2.py --multi")
    print()
    
    print(f"{Fore.WHITE}üîπ Ch·∫°y ph√¢n t√≠ch cho t·ª´ng ki·ªÉu ƒë·∫ßu t∆∞:{Style.RESET_ALL}")
    print(f"   python3 enhanced_app_v2.py 60m    # Scalping")
    print(f"   python3 enhanced_app_v2.py 4h     # Swing")
    print(f"   python3 enhanced_app_v2.py 1d     # Position")
    print()
    
    print(f"{Fore.WHITE}üîπ S·ª≠ d·ª•ng Auto Runner:{Style.RESET_ALL}")
    print(f"   python3 auto_runner.py --once     # Ch·∫°y m·ªôt l·∫ßn")
    print(f"   python3 auto_runner.py --multi    # T·∫•t c·∫£ khung th·ªùi gian")
    print(f"   python3 auto_runner.py --60m      # Ch·ªâ scalping")
    print(f"   python3 auto_runner.py --4h       # Ch·ªâ swing")
    print(f"   python3 auto_runner.py --1d       # Ch·ªâ position")
    print()

def main():
    demo_header()
    
    print(f"üé¨ {Fore.YELLOW}B·∫Øt ƒë·∫ßu demo c√°c t√≠nh nƒÉng m·ªõi...{Style.RESET_ALL}\n")
    time.sleep(2)
    
    # Demo 1: C√°c ki·ªÉu ƒë·∫ßu t∆∞ kh√°c nhau
    demo_single_investment_types()
    
    # Demo 2: C√°c c·∫∑p coin m·ªõi
    demo_new_pairs()
    
    # Demo 3: H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
    demo_usage_instructions()
    
    print(f"\n{Fore.GREEN}{Style.BRIGHT}‚úÖ DEMO HO√ÄN TH√ÄNH!{Style.RESET_ALL}")
    print(f"{Fore.CYAN}üöÄ App ƒë√£ s·∫µn s√†ng v·ªõi t·∫•t c·∫£ t√≠nh nƒÉng m·ªõi:{Style.RESET_ALL}")
    print(f"   ‚Ä¢ 3 ki·ªÉu ƒë·∫ßu t∆∞ (60m, 4h, 1d)")
    print(f"   ‚Ä¢ 7 c·∫∑p coin JPY (bao g·ªìm LINK, SOL, ETH)")
    print(f"   ‚Ä¢ TP/SL ƒë∆∞·ª£c t·ªëi ∆∞u theo th·ªùi gian gi·ªØ l·ªánh")
    print(f"   ‚Ä¢ Ph√¢n t√≠ch ƒëa khung th·ªùi gian")
    print()

if __name__ == "__main__":
    main()
