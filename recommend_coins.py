#!/usr/bin/env python3
"""
Script ƒë·ªÅ xu·∫•t 2 coin t·ªët nh·∫•t cho m·ªói khung th·ªùi                print(f"üìä ƒêi·ªÉm mua: {result['buy_score']:.1f}")
                print(f"üìà Xu h∆∞·ªõng: {result['trend_strength']}")
                print(f"üîç Ch·∫•t l∆∞·ª£ng entry: {result['entry_quality']}")n d·ª± ƒëo√°n
"""

from enhanced_app_v2 import EnhancedCryptoPredictionAppV2
from colorama import Fore, Style
import sys

def recommend_coins_by_timeframe():
    """ƒê·ªÅ xu·∫•t 2 coin t·ªët nh·∫•t cho m·ªói khung th·ªùi gian"""
    
    print(f"{Fore.CYAN}üéØ ƒê·ªÄNH XU·∫§T COIN THEO KHUNG TH·ªúI GIAN{Style.RESET_ALL}")
    print("=" * 60)
    
    # T·∫°o app instance
    app = EnhancedCryptoPredictionAppV2()
    
    # L·∫•y top coins ƒë·ªÉ ph√¢n t√≠ch
    print(f"{Fore.YELLOW}üîç ƒêang l·∫•y danh s√°ch top coins...{Style.RESET_ALL}")
    top_coins = app.get_top_coins_by_base_currency('USDT', 30)
    
    # Dictionary ƒë·ªÉ l∆∞u k·∫øt qu·∫£ theo khung th·ªùi gian
    timeframe_results = {
        '60m': [],
        '4h': [], 
        '1d': []
    }
    
    # Ph√¢n t√≠ch t·ª´ng coin cho m·ªói khung th·ªùi gian
    for coin_data in top_coins:
        symbol = coin_data['symbol']
        print(f"üìä Analyzing {symbol}...")
        
        try:
            # Ph√¢n t√≠ch cho m·ªói khung th·ªùi gian
            for timeframe in ['60m', '4h', '1d']:
                result = app.analyze_single_pair_by_investment_type(symbol, timeframe)
                
                # CH·ªà L·∫§Y NH·ªÆNG COIN C√ì T√çN HI·ªÜU BUY CHO SPOT TRADING
                if result['signal_type'] == 'BUY':
                    # T√≠nh ƒëi·ªÉm t·ªïng h·ª£p cho BUY signal
                    composite_score = (
                        result['success_probability'] * 0.4 +  # 40% weight
                        (result['buy_score'] / 20) * 0.3 +     # 30% weight (normalize to 0-1)
                        (result['rr_ratio'] / 5) * 0.2 +       # 20% weight (normalize to 0-1)
                        (0.1 if result['entry_quality'] == 'HIGH' else 0.05 if result['entry_quality'] == 'MEDIUM' else 0) * 0.1  # 10% weight
                    )
                    
                    result['composite_score'] = composite_score
                    timeframe_results[timeframe].append(result)
                    
        except Exception as e:
            print(f"‚ùå Error analyzing {symbol}: {e}")
            continue
    
    # Hi·ªÉn th·ªã ƒë·ªÅ xu·∫•t cho m·ªói khung th·ªùi gian
    for timeframe in ['60m', '4h', '1d']:
        results = timeframe_results[timeframe]
        
        print(f"\n{Fore.GREEN}{'='*60}{Style.RESET_ALL}")
        print(f"{Fore.GREEN}‚è∞ KHUNG TH·ªúI GIAN: {timeframe.upper()}{Style.RESET_ALL}")
        print(f"{Fore.GREEN}Th·ªùi gian n·∫Øm gi·ªØ: {app.investment_types[timeframe]['hold_duration']}{Style.RESET_ALL}")
        print(f"{Fore.GREEN}{'='*60}{Style.RESET_ALL}")
        
        if len(results) >= 2:
            # Sort by composite score
            results.sort(key=lambda x: x['composite_score'], reverse=True)
            
            # L·∫•y top 2
            top_2 = results[:2]
            
            for i, result in enumerate(top_2, 1):
                print(f"\n{Fore.CYAN}üèÜ #{i}. {result['symbol']}{Style.RESET_ALL}")
                print(f"üìà Gi√° hi·ªán t·∫°i: ${result['current_price']:.6f}")
                print(f"üéØ T√≠n hi·ªáu: {result['signal_type']}")
                print(f"‚≠ê ƒêi·ªÉm t·ªïng h·ª£p: {result['composite_score']:.3f}")
                print(f"‚úÖ X√°c su·∫•t th√†nh c√¥ng: {result['success_probability']*100:.1f}%")
                print(f"üìä ƒêi·ªÉm mua: {result['buy_score']:.1f}")
                print(f"ÔøΩ ƒêi·ªÉm b√°n: {result['sell_score']:.1f}")
                print(f"ÔøΩüìà Xu h∆∞·ªõng: {result['trend_strength']}")
                print(f"üîç Ch·∫•t l∆∞·ª£ng entry: {result['entry_quality']}")
                
                # TP/SL Details CH·ªà CHO BUY (SPOT TRADING)
                tp1_pct = ((result['tp1']/result['entry_price'])-1)*100
                tp2_pct = ((result['tp2']/result['entry_price'])-1)*100
                sl_pct = ((result['stop_loss']/result['entry_price'])-1)*100
                
                print(f"\n{Fore.YELLOW}üí∞ SPOT BUY - M·ª®C GI√Å M·ª§C TI√äU:{Style.RESET_ALL}")
                print(f"   Entry:     ${result['entry_price']:.6f}")
                print(f"   TP1:       ${result['tp1']:.6f} ({Fore.GREEN}+{tp1_pct:.2f}%{Style.RESET_ALL})")
                print(f"   TP2:       ${result['tp2']:.6f} ({Fore.GREEN}+{tp2_pct:.2f}%{Style.RESET_ALL})")
                print(f"   Stop Loss: ${result['stop_loss']:.6f} ({Fore.RED}{sl_pct:.2f}%{Style.RESET_ALL})")
                
                print(f"   R:R Ratio: {Fore.CYAN}{result['rr_ratio']:.2f}{Style.RESET_ALL}")
                
                print(f"\n{Fore.MAGENTA}üî¨ CH·ªà S·ªê K·ª∏ THU·∫¨T:{Style.RESET_ALL}")
                print(f"   RSI: {result['rsi']:.1f}")
                print(f"   ATR: {result['atr']:.6f}")
                
                # Hi·ªÉn th·ªã c√°c t√≠n hi·ªáu quan tr·ªçng CH·ªà CHO BUY (SPOT TRADING)
                important_signals = []
                signals = result.get('signals', {})
                
                # CH·ªà HI·ªÇN TH·ªä T√çN HI·ªÜU BUY CHO SPOT TRADING
                signal_names = {
                    'ichimoku_bullish_cross': 'Ichimoku Bullish Cross',
                    'perfect_bullish_alignment': 'Perfect Bullish Alignment', 
                    'RSI_oversold_recovery': 'RSI Oversold Recovery',
                    'MACD_strong_bullish': 'MACD Strong Bullish',
                    'support_bounce': 'Support Bounce',
                    'bullish_candlestick': 'Bullish Candlestick',
                    'strong_bullish_consensus': 'Strong Bullish Consensus'
                }
                
                for signal_key, signal_name in signal_names.items():
                    if signals.get(signal_key, False):
                        important_signals.append(signal_name)
                
                if important_signals:
                    print(f"\n{Fore.BLUE}üöÄ T√çN HI·ªÜU QUAN TR·ªåNG:{Style.RESET_ALL}")
                    for signal in important_signals[:3]:  # Hi·ªÉn th·ªã top 3
                        print(f"   ‚Ä¢ {signal}")
                
                # Prediction accuracy n·∫øu c√≥
                pred_results = result['prediction_results']
                if pred_results['total'] > 0:
                    print(f"\n{Fore.CYAN}üìä L·ªäCH S·ª¨ D·ª∞ ƒêO√ÅN:{Style.RESET_ALL}")
                    print(f"   T·ªïng: {pred_results['total']}")
                    print(f"   ƒê·ªô ch√≠nh x√°c TB: {pred_results['average_accuracy']:.1f}%")
        
        elif len(results) == 1:
            result = results[0]
            print(f"\n{Fore.YELLOW}‚ö†Ô∏è  Ch·ªâ t√¨m th·∫•y 1 coin ph√π h·ª£p:{Style.RESET_ALL}")
            print(f"üèÜ {result['symbol']} - {result['signal_type']} - X√°c su·∫•t: {result['success_probability']*100:.1f}%")
            
        else:
            print(f"\n{Fore.RED}‚ùå Kh√¥ng t√¨m th·∫•y coin n√†o c√≥ t√≠n hi·ªáu BUY/SELL ph√π h·ª£p cho khung {timeframe}{Style.RESET_ALL}")
            print(f"   Th·ªã tr∆∞·ªùng c√≥ th·ªÉ ƒëang trong giai ƒëo·∫°n sideways")
            print(f"   Khuy·∫øn ngh·ªã: Ch·ªù ƒë·ª£i t√≠n hi·ªáu t·ªët h∆°n")
    
    # T√≥m t·∫Øt chung
    print(f"\n{Fore.CYAN}{'='*60}{Style.RESET_ALL}")
    print(f"{Fore.CYAN}üìã T√ìM T·∫ÆT ƒêNTH XU·∫§T{Style.RESET_ALL}")
    print(f"{Fore.CYAN}{'='*60}{Style.RESET_ALL}")
    
    total_recommendations = sum(min(len(results), 2) for results in timeframe_results.values())
    print(f"üéØ T·ªïng s·ªë coin ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t: {total_recommendations}")
    
    for timeframe, results in timeframe_results.items():
        count = min(len(results), 2)
        if count > 0:
            top_symbols = [r['symbol'] for r in sorted(results, key=lambda x: x['composite_score'], reverse=True)[:count]]
            print(f"‚è∞ {timeframe}: {', '.join(top_symbols)}")
    
    print(f"\n{Fore.GREEN}‚úÖ Ph√¢n t√≠ch ho√†n t·∫•t!{Style.RESET_ALL}")
    print(f"\n{Fore.BLUE}üí° L∆ØU √ù:{Style.RESET_ALL}")
    print(f"   ‚Ä¢ ƒê√¢y ch·ªâ l√† ƒë·ªÅ xu·∫•t d·ª±a tr√™n ph√¢n t√≠ch k·ªπ thu·∫≠t")
    print(f"   ‚Ä¢ Lu√¥n th·ª±c hi·ªán qu·∫£n l√Ω r·ªßi ro v√† ƒë·∫∑t stop loss")
    print(f"   ‚Ä¢ Theo d√µi th·ªã tr∆∞·ªùng v√† ƒëi·ªÅu ch·ªânh chi·∫øn l∆∞·ª£c khi c·∫ßn")
    print(f"   ‚Ä¢ Kh√¥ng ƒë·∫ßu t∆∞ qu√° 2-5% t·ªïng t√†i kho·∫£n cho m·ªói l·ªánh")

if __name__ == "__main__":
    recommend_coins_by_timeframe()
