#!/usr/bin/env python3
"""
Enhanced Crypto Analysis v·ªõi logic s·ª≠a ƒë·ªïi v√† tracking k·∫øt qu·∫£
"""

import pandas as pd
import numpy as np
import requests
import time
from datetime import datetime, timedelta
import talib
import warnings
import os
import json
from tabulate import tabulate
import colorama
from colorama import Fore, Back, Style

warnings.filterwarnings('ignore')
colorama.init()

class PredictionTracker:
    """Class ƒë·ªÉ theo d√µi v√† ƒë√°nh gi√° k·∫øt qu·∫£ d·ª± ƒëo√°n"""
    
    def __init__(self, data_file="prediction_history.json"):
        self.data_file = data_file
        self.predictions = self.load_predictions()
    
    def load_predictions(self):
        """Load l·ªãch s·ª≠ d·ª± ƒëo√°n"""
        try:
            if os.path.exists(self.data_file):
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {}
        except Exception as e:
            print(f"‚ùå Error loading predictions: {e}")
            return {}
    
    def save_predictions(self):
        """L∆∞u l·ªãch s·ª≠ d·ª± ƒëo√°n"""
        try:
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(self.predictions, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"‚ùå Error saving predictions: {e}")
    
    def add_prediction(self, symbol, prediction_data):
        """Th√™m d·ª± ƒëo√°n m·ªõi"""
        if symbol not in self.predictions:
            self.predictions[symbol] = []
        
        prediction_data['timestamp'] = datetime.now().isoformat()
        prediction_data['status'] = 'PENDING'  # PENDING, HIT_TP1, HIT_TP2, HIT_SL, EXPIRED
        
        self.predictions[symbol].append(prediction_data)
        
        # Gi·ªØ ch·ªâ 50 predictions g·∫ßn nh·∫•t cho m·ªói symbol
        if len(self.predictions[symbol]) > 50:
            self.predictions[symbol] = self.predictions[symbol][-50:]
        
        self.save_predictions()
    
    def check_predictions(self, symbol, current_price):
        """Ki·ªÉm tra k·∫øt qu·∫£ c√°c d·ª± ƒëo√°n v√† t√≠nh accuracy m·ªõi"""
        if symbol not in self.predictions:
            return {'total': 0, 'hit_tp1': 0, 'hit_tp2': 0, 'hit_sl': 0, 'pending': 0, 
                   'latest_accuracy': 0, 'average_accuracy': 0}
        
        results = {'total': 0, 'hit_tp1': 0, 'hit_tp2': 0, 'hit_sl': 0, 'pending': 0}
        accuracy_list = []
        latest_accuracy = 0
        
        for i, prediction in enumerate(self.predictions[symbol]):
            # T√≠nh accuracy cho t·ª´ng prediction
            single_accuracy = self.calculate_single_accuracy(prediction, current_price)
            
            # L∆∞u accuracy v√†o prediction n·∫øu ch∆∞a c√≥
            if 'accuracy' not in prediction:
                prediction['accuracy'] = single_accuracy
            
            accuracy_list.append(prediction['accuracy'])
            
            # Accuracy c·ªßa prediction g·∫ßn nh·∫•t
            if i == len(self.predictions[symbol]) - 1:
                latest_accuracy = single_accuracy
                # C·∫≠p nh·∫≠t accuracy cho prediction g·∫ßn nh·∫•t
                prediction['accuracy'] = single_accuracy
            
            if prediction['status'] == 'PENDING':
                # Ki·ªÉm tra th·ªùi gian h·∫øt h·∫°n (24h)
                pred_time = datetime.fromisoformat(prediction['timestamp'])
                if datetime.now() - pred_time > timedelta(hours=24):
                    prediction['status'] = 'EXPIRED'
                    continue
                
                # Ki·ªÉm tra TP/SL cho status c≈©
                signal_type = prediction['signal_type']
                entry_price = prediction['entry_price']
                tp1 = prediction['tp1']
                tp2 = prediction['tp2']
                stop_loss = prediction['stop_loss']
                
                if signal_type == 'BUY':
                    if current_price >= tp2:
                        prediction['status'] = 'HIT_TP2'
                        prediction['actual_exit_price'] = current_price
                    elif current_price >= tp1:
                        prediction['status'] = 'HIT_TP1'
                        prediction['actual_exit_price'] = current_price
                    elif current_price <= stop_loss:
                        prediction['status'] = 'HIT_SL'
                        prediction['actual_exit_price'] = current_price
                elif signal_type == 'SELL':
                    if current_price <= tp2:
                        prediction['status'] = 'HIT_TP2'
                        prediction['actual_exit_price'] = current_price
                    elif current_price <= tp1:
                        prediction['status'] = 'HIT_TP1'
                        prediction['actual_exit_price'] = current_price
                    elif current_price >= stop_loss:
                        prediction['status'] = 'HIT_SL'
                        prediction['actual_exit_price'] = current_price
        
        # T√≠nh to√°n th·ªëng k√™ c≈©
        for prediction in self.predictions[symbol]:
            results['total'] += 1
            if prediction['status'] == 'HIT_TP1':
                results['hit_tp1'] += 1
            elif prediction['status'] == 'HIT_TP2':
                results['hit_tp2'] += 1
            elif prediction['status'] == 'HIT_SL':
                results['hit_sl'] += 1
            elif prediction['status'] == 'PENDING':
                results['pending'] += 1
        
        # T√≠nh accuracy trung b√¨nh
        average_accuracy = sum(accuracy_list) / len(accuracy_list) if accuracy_list else 0
        
        results['latest_accuracy'] = latest_accuracy
        results['average_accuracy'] = average_accuracy
        
        self.save_predictions()
        return results
    
    def calculate_single_accuracy(self, prediction, current_price):
        """T√≠nh accuracy cho m·ªôt prediction d·ª±a tr√™n logic m·ªõi"""
        try:
            signal_type = prediction['signal_type']
            tp1 = prediction['tp1']
            tp2 = prediction['tp2']
            
            if signal_type == 'BUY':
                # V·ªõi BUY: n·∫øu gi√° hi·ªán t·∫°i >= TP1 ho·∫∑c TP2 th√¨ accuracy = 100%
                if current_price >= tp2:
                    return 100.0  # ƒê·∫°t TP2 = 100%
                elif current_price >= tp1:
                    return 100.0  # ƒê·∫°t TP1 = 100%
                else:
                    return 0.0    # Ch∆∞a ƒë·∫°t TP = 0%
            
            elif signal_type == 'SELL':
                # V·ªõi SELL: n·∫øu gi√° hi·ªán t·∫°i <= TP1 ho·∫∑c TP2 th√¨ accuracy = 100%
                if current_price <= tp2:
                    return 100.0  # ƒê·∫°t TP2 = 100%
                elif current_price <= tp1:
                    return 100.0  # ƒê·∫°t TP1 = 100%
                else:
                    return 0.0    # Ch∆∞a ƒë·∫°t TP = 0%
            
            else:  # WAIT signal
                return 0.0
                
        except Exception as e:
            print(f"‚ùå Error calculating accuracy: {e}")
            return 0.0

class EnhancedCryptoPredictionAppV2:
    def __init__(self):
        self.pairs = ['XRPJPY', 'XLMJPY', 'ADAJPY', 'SUIJPY']
        self.base_url = "https://api.binance.com/api/v3/klines"
        self.tracker = PredictionTracker()
        
    def print_header(self):
        """In header ƒë·∫πp"""
        header = f"""
{Fore.CYAN}{Style.BRIGHT}
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üöÄ CRYPTO SPOT TRADING ANALYZER V2.0                     ‚ïë
‚ïë                     Find Best BUY Opportunities Only                        ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
{Style.RESET_ALL}

{Fore.YELLOW}üìä Analyzing: {', '.join(self.pairs)} - SPOT TRADING ONLY{Style.RESET_ALL}
{Fore.GREEN}‚è∞ Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}{Style.RESET_ALL}
{Fore.BLUE}üéØ Strategy: Buy Low ‚Üí Hold ‚Üí Sell High{Style.RESET_ALL}
"""
        print(header)
    
    def get_kline_data(self, symbol, interval='15m', limit=200):
        """L·∫•y d·ªØ li·ªáu gi√° t·ª´ Binance API v·ªõi error handling t·ªët h∆°n"""
        try:
            params = {
                'symbol': symbol,
                'interval': interval,
                'limit': limit
            }
            
            response = requests.get(self.base_url, params=params, timeout=10)
            response.raise_for_status()
            data = response.json()
            
            if not data:
                return None
            
            # Chuy·ªÉn ƒë·ªïi th√†nh DataFrame
            df = pd.DataFrame(data, columns=[
                'timestamp', 'open', 'high', 'low', 'close', 'volume',
                'close_time', 'quote_asset_volume', 'number_of_trades',
                'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume', 'ignore'
            ])
            
            # Chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu
            for col in ['open', 'high', 'low', 'close', 'volume']:
                df[col] = pd.to_numeric(df[col])
            
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df.set_index('timestamp', inplace=True)
            
            return df[['open', 'high', 'low', 'close', 'volume']]
            
        except requests.exceptions.RequestException as e:
            print(f"{Fore.RED}‚ùå Network error for {symbol}: {e}{Style.RESET_ALL}")
            return None
        except Exception as e:
            print(f"{Fore.RED}‚ùå Data error for {symbol}: {e}{Style.RESET_ALL}")
            return None
    
    def calculate_advanced_indicators(self, df):
        """T√≠nh to√°n c√°c ch·ªâ b√°o k·ªπ thu·∫≠t n√¢ng cao"""
        if df is None or len(df) < 50:
            return None
            
        try:
            # Moving Averages
            df['EMA_10'] = talib.EMA(df['close'], timeperiod=10)
            df['EMA_20'] = talib.EMA(df['close'], timeperiod=20)
            df['EMA_50'] = talib.EMA(df['close'], timeperiod=50)
            df['SMA_200'] = talib.SMA(df['close'], timeperiod=min(len(df), 200))
            
            # Momentum Indicators
            df['RSI'] = talib.RSI(df['close'], timeperiod=14)
            df['RSI_fast'] = talib.RSI(df['close'], timeperiod=7)
            df['MACD'], df['MACD_signal'], df['MACD_hist'] = talib.MACD(df['close'])
            df['STOCH_K'], df['STOCH_D'] = talib.STOCH(df['high'], df['low'], df['close'])
            
            # Volatility Indicators
            df['BB_upper'], df['BB_middle'], df['BB_lower'] = talib.BBANDS(df['close'])
            df['ATR'] = talib.ATR(df['high'], df['low'], df['close'], timeperiod=14)
            df['Keltner_upper'] = df['EMA_20'] + (2 * df['ATR'])
            df['Keltner_lower'] = df['EMA_20'] - (2 * df['ATR'])
            
            # Volume Indicators
            df['OBV'] = talib.OBV(df['close'], df['volume'])
            df['AD_line'] = talib.AD(df['high'], df['low'], df['close'], df['volume'])
            df['volume_sma'] = talib.SMA(df['volume'], timeperiod=20)
            df['volume_ratio'] = df['volume'] / df['volume_sma']
            
            # Support/Resistance v√† Pivot Points
            df['resistance'] = df['high'].rolling(window=20).max()
            df['support'] = df['low'].rolling(window=20).min()
            
            # Price Action Patterns
            df['hammer'] = talib.CDLHAMMER(df['open'], df['high'], df['low'], df['close'])
            df['engulfing'] = talib.CDLENGULFING(df['open'], df['high'], df['low'], df['close'])
            df['doji'] = talib.CDLDOJI(df['open'], df['high'], df['low'], df['close'])
            
            return df
            
        except Exception as e:
            print(f"{Fore.RED}‚ùå Indicator calculation error: {e}{Style.RESET_ALL}")
            return None
    
    def calculate_entry_price(self, current_price, signal_type, trend_strength, atr_value, df):
        """T√≠nh to√°n gi√° entry cho SPOT TRADING (ch·ªâ mua)"""
        latest = df.iloc[-1]
        
        if signal_type == 'BUY':
            if trend_strength == "STRONG_UP":
                # Uptrend m·∫°nh: c√≥ th·ªÉ mua ngay ho·∫∑c ch·ªù pullback nh·∫π
                entry_price = current_price * 0.998  # Mua th·∫•p h∆°n 0.2%
            elif trend_strength in ["STRONG_DOWN", "WAIT_FOR_UPTREND"]:
                # Downtrend: ch·ªù support m·∫°nh ho·∫∑c reversal signal
                support_level = latest['support']
                pullback_level = current_price * 0.95  # Ch·ªù gi·∫£m 5%
                entry_price = max(support_level, pullback_level)
            else:
                # Mixed trend: ch·ªù pullback v·ªÅ support
                pullback_level = current_price - (atr_value * 0.5)
                support_level = latest['support']
                entry_price = max(pullback_level, support_level)
                entry_price = min(entry_price, current_price * 0.995)
        
        else:  # WAIT signal
            # Kh√¥ng mua, ƒë·∫∑t entry price th·∫•p ƒë·ªÉ ch·ªù c∆° h·ªôi t·ªët h∆°n
            entry_price = current_price * 0.95  # Ch·ªù gi·∫£m 5%
        
        return entry_price
    
    def calculate_tp_sl_fixed(self, entry_price, signal_type, atr_value, trend_strength):
        """T√≠nh to√°n TP/SL cho SPOT TRADING (ch·ªâ BUY)"""
        
        # ƒêi·ªÅu ch·ªânh multiplier cho spot trading
        if trend_strength == "STRONG_UP":
            tp1_multiplier = 2.5  # TP cao h∆°n cho uptrend m·∫°nh
            tp2_multiplier = 4.0  
            sl_multiplier = 1.5   # SL conservative
        elif trend_strength in ["STRONG_DOWN", "WAIT_FOR_UPTREND"]:
            tp1_multiplier = 1.5  # TP conservative trong downtrend
            tp2_multiplier = 2.5
            sl_multiplier = 1.0   # SL tight h∆°n
        else:
            tp1_multiplier = 2.0
            tp2_multiplier = 3.0
            sl_multiplier = 1.2
        
        if signal_type == 'BUY':
            # SPOT BUY: Mua th·∫•p, b√°n cao
            tp1 = entry_price + (atr_value * tp1_multiplier)    # B√°n m·ªôt ph·∫ßn
            tp2 = entry_price + (atr_value * tp2_multiplier)    # B√°n ph·∫ßn c√≤n l·∫°i
            stop_loss = entry_price - (atr_value * sl_multiplier)  # C·∫Øt l·ªó n·∫øu gi√° ti·∫øp t·ª•c gi·∫£m
        else:  # WAIT
            # Kh√¥ng trade, ƒë·∫∑t level th·∫•p ƒë·ªÉ ch·ªù
            tp1 = entry_price + (atr_value * 1.0)
            tp2 = entry_price + (atr_value * 2.0)
            stop_loss = entry_price - (atr_value * 0.5)
        
        return tp1, tp2, stop_loss
    
    def calculate_enhanced_signal_score(self, df):
        """T√≠nh ƒëi·ªÉm t√≠n hi·ªáu n√¢ng cao v·ªõi tr·ªçng s·ªë"""
        if df is None or len(df) < 3:
            return 0, 0, {}
            
        latest = df.iloc[-1]
        prev = df.iloc[-2]
        prev2 = df.iloc[-3]
        
        buy_score = 0
        sell_score = 0
        signals = {}
        
        # 1. Trend Following Signals (Tr·ªçng s·ªë cao)
        # EMA Crossover
        if latest['EMA_10'] > latest['EMA_20'] and prev['EMA_10'] <= prev['EMA_20']:
            buy_score += 3
            signals['EMA_bullish_cross'] = True
        elif latest['EMA_10'] < latest['EMA_20'] and prev['EMA_10'] >= prev['EMA_20']:
            sell_score += 3
            signals['EMA_bearish_cross'] = True
        
        # Price vs EMA Alignment
        if latest['close'] > latest['EMA_10'] > latest['EMA_20'] > latest['EMA_50']:
            buy_score += 2
            signals['bullish_alignment'] = True
        elif latest['close'] < latest['EMA_10'] < latest['EMA_20'] < latest['EMA_50']:
            sell_score += 2
            signals['bearish_alignment'] = True
        
        # 2. Momentum Signals
        # RSI Signals
        if latest['RSI'] < 30 and latest['RSI'] > prev['RSI']:
            buy_score += 2.5
            signals['RSI_oversold_recovery'] = True
        elif latest['RSI'] > 70 and latest['RSI'] < prev['RSI']:
            sell_score += 2.5
            signals['RSI_overbought_decline'] = True
        
        # RSI Divergence (simplified)
        if (latest['close'] < prev2['close'] and latest['RSI'] > prev2['RSI'] and latest['RSI'] < 50):
            buy_score += 2
            signals['RSI_bullish_divergence'] = True
        elif (latest['close'] > prev2['close'] and latest['RSI'] < prev2['RSI'] and latest['RSI'] > 50):
            sell_score += 2
            signals['RSI_bearish_divergence'] = True
        
        # MACD Signals
        if not pd.isna(latest['MACD']) and not pd.isna(latest['MACD_signal']):
            if latest['MACD'] > latest['MACD_signal'] and prev['MACD'] <= prev['MACD_signal']:
                buy_score += 2.5
                signals['MACD_bullish_cross'] = True
            elif latest['MACD'] < latest['MACD_signal'] and prev['MACD'] >= prev['MACD_signal']:
                sell_score += 2.5
                signals['MACD_bearish_cross'] = True
        
        # 3. Volume Analysis
        if latest['volume_ratio'] > 1.5:  # High volume
            if latest['close'] > prev['close']:
                buy_score += 1.5
                signals['volume_bullish_confirmation'] = True
            elif latest['close'] < prev['close']:
                sell_score += 1.5
                signals['volume_bearish_confirmation'] = True
        
        # 4. Support/Resistance
        price_near_support = abs(latest['close'] - latest['support']) / latest['close'] < 0.015
        price_near_resistance = abs(latest['close'] - latest['resistance']) / latest['close'] < 0.015
        
        if price_near_support and latest['close'] > prev['close']:
            buy_score += 1.5
            signals['support_bounce'] = True
        elif price_near_resistance and latest['close'] < prev['close']:
            sell_score += 1.5
            signals['resistance_rejection'] = True
        
        return buy_score, sell_score, signals
    
    def analyze_trend_strength(self, trends):
        """Ph√¢n t√≠ch s·ª©c m·∫°nh xu h∆∞·ªõng"""
        if not trends:
            return 0, "UNKNOWN"
        
        uptrend_count = sum(1 for trend in trends.values() if trend == 'UPTREND')
        downtrend_count = sum(1 for trend in trends.values() if trend == 'DOWNTREND')
        
        if uptrend_count >= 2:
            return uptrend_count * 0.1, "STRONG_UP"
        elif downtrend_count >= 2:
            return downtrend_count * 0.1, "STRONG_DOWN"
        else:
            return 0, "MIXED"
    
    def predict_enhanced_probability(self, buy_score, sell_score, trends, rsi_value, volume_ratio):
        """D·ª± ƒëo√°n x√°c su·∫•t th√†nh c√¥ng cho SPOT TRADING (ch·ªâ BUY)"""
        # SPOT TRADING: Ch·ªâ quan t√¢m ƒë·∫øn t√≠n hi·ªáu mua ƒë·ªÉ b√°n cao h∆°n
        # Kh√¥ng trade short n√™n ch·ªâ t√¨m c∆° h·ªôi mua th·∫•p b√°n cao
        
        signal_type = 'BUY'  # Ch·ªâ spot buy
        max_score = buy_score
        
        # N·∫øu sell_score cao h∆°n buy_score, nghƒ©a l√† th·ªã tr∆∞·ªùng ƒëang bearish
        # ‚Üí Kh√¥ng mua, ch·ªù c∆° h·ªôi t·ªët h∆°n
        if sell_score > buy_score:
            # Th·ªã tr∆∞·ªùng bearish, kh√¥ng khuy·∫øn ngh·ªã mua
            max_score = 0
            signal_type = 'WAIT'  # Ch·ªù th·ªùi ƒëi·ªÉm t·ªët h∆°n
        
        # Base probability cho BUY signal (t·ªëi ƒëa 70%)
        if signal_type == 'BUY':
            base_prob = min(max_score / 15.0, 0.7)
        else:
            base_prob = 0  # Kh√¥ng mua khi th·ªã tr∆∞·ªùng bearish
        
        # Trend bonus - ch·ªâ bonus khi uptrend
        trend_bonus, trend_strength = self.analyze_trend_strength(trends)
        if trend_strength == "STRONG_DOWN":
            trend_bonus = -0.2  # Penalty cho downtrend m·∫°nh
            trend_strength = "WAIT_FOR_UPTREND"
        
        # RSI bonus - ∆∞u ti√™n mua khi oversold
        rsi_bonus = 0
        if signal_type == 'BUY':
            if rsi_value < 30:  # Oversold - c∆° h·ªôi t·ªët
                rsi_bonus = 0.15
            elif 30 <= rsi_value <= 45:  # Decent entry
                rsi_bonus = 0.1
            elif rsi_value > 70:  # Overbought - kh√¥ng n√™n mua
                rsi_bonus = -0.15
        
        # Volume bonus
        volume_bonus = 0
        if volume_ratio > 1.5:
            volume_bonus = 0.05
        elif volume_ratio > 2.0:
            volume_bonus = 0.1
        
        # Score difference bonus - ch·ªâ khi BUY score th·ªëng tr·ªã
        score_diff = buy_score - sell_score
        if score_diff > 5:
            score_bonus = 0.1
        elif score_diff < -2:  # Sell signal m·∫°nh h∆°n
            score_bonus = -0.15
        else:
            score_bonus = 0
        
        final_prob = max(0, min(base_prob + trend_bonus + rsi_bonus + volume_bonus + score_bonus, 0.95))
        
        return final_prob, signal_type, trend_strength
    
    def analyze_single_pair_enhanced(self, symbol):
        """Ph√¢n t√≠ch n√¢ng cao m·ªôt c·∫∑p coin"""
        print(f"{Fore.BLUE}üìä Analyzing {symbol}...{Style.RESET_ALL}")
        
        # L·∫•y d·ªØ li·ªáu 15m
        df_15m = self.get_kline_data(symbol, '15m', 200)
        if df_15m is None:
            return None
        
        df_15m = self.calculate_advanced_indicators(df_15m)
        if df_15m is None:
            return None
        
        # Ki·ªÉm tra k·∫øt qu·∫£ d·ª± ƒëo√°n tr∆∞·ªõc ƒë√≥
        current_price = df_15m.iloc[-1]['close']
        prediction_results = self.tracker.check_predictions(symbol, current_price)
        
        # Ph√¢n t√≠ch xu h∆∞·ªõng ƒëa khung th·ªùi gian
        trends = {}
        timeframes = ['15m', '1h', '4h']
        for tf in timeframes:
            df = self.get_kline_data(symbol, tf, 100)
            if df is not None:
                df = self.calculate_advanced_indicators(df)
                if df is not None and len(df) > 0:
                    latest = df.iloc[-1]
                    if not pd.isna(latest['EMA_10']) and not pd.isna(latest['EMA_20']):
                        if latest['EMA_10'] > latest['EMA_20'] and latest['close'] > latest['EMA_10']:
                            trends[tf] = 'UPTREND'
                        elif latest['EMA_10'] < latest['EMA_20'] and latest['close'] < latest['EMA_10']:
                            trends[tf] = 'DOWNTREND'
                        else:
                            trends[tf] = 'SIDEWAYS'
            time.sleep(0.5)  # Rate limit
        
        # T√≠nh ƒëi·ªÉm t√≠n hi·ªáu n√¢ng cao
        buy_score, sell_score, signals = self.calculate_enhanced_signal_score(df_15m)
        
        latest = df_15m.iloc[-1]
        
        # D·ª± ƒëo√°n x√°c su·∫•t th√†nh c√¥ng
        success_prob, signal_type, trend_strength = self.predict_enhanced_probability(
            buy_score, sell_score, trends, latest['RSI'], latest['volume_ratio']
        )
        
        # T√≠nh entry price ph√π h·ª£p
        entry_price = self.calculate_entry_price(
            current_price, signal_type, trend_strength, latest['ATR'], df_15m
        )
        
        # T√≠nh TP/SL v·ªõi logic ƒë√∫ng
        tp1, tp2, stop_loss = self.calculate_tp_sl_fixed(
            entry_price, signal_type, latest['ATR'], trend_strength
        )
        
        # Risk/Reward ratio - ch·ªâ t√≠nh cho BUY
        if signal_type == 'BUY':
            rr_ratio = (tp1 - entry_price) / (entry_price - stop_loss)
        else:  # WAIT
            rr_ratio = 0  # Kh√¥ng trade
        
        result = {
            'symbol': symbol,
            'current_price': current_price,
            'entry_price': entry_price,
            'signal_type': signal_type,
            'buy_score': buy_score,
            'sell_score': sell_score,
            'success_probability': success_prob,
            'trends': trends,
            'trend_strength': trend_strength,
            'tp1': tp1,
            'tp2': tp2,
            'stop_loss': stop_loss,
            'rr_ratio': rr_ratio,
            'rsi': latest['RSI'],
            'volume_ratio': latest['volume_ratio'],
            'atr': latest['ATR'],
            'signals': signals,
            'entry_quality': 'HIGH' if success_prob > 0.75 else 'MEDIUM' if success_prob > 0.6 else 'LOW',
            'prediction_results': prediction_results
        }
        
        # L∆∞u d·ª± ƒëo√°n m·ªõi
        prediction_data = {
            'current_price': current_price,
            'entry_price': entry_price,
            'signal_type': signal_type,
            'success_probability': success_prob,
            'tp1': tp1,
            'tp2': tp2,
            'stop_loss': stop_loss,
            'trend_strength': trend_strength,
            'entry_quality': result['entry_quality']
        }
        self.tracker.add_prediction(symbol, prediction_data)
        
        return result
    
    def create_results_table(self, results):
        """T·∫°o b·∫£ng k·∫øt qu·∫£ ƒë·∫πp"""
        if not results:
            return "No results available"
        
        table_data = []
        for i, result in enumerate(results, 1):
            # T√≠nh % change cho TP v√† SL d·ª±a tr√™n Entry Price
            entry_price = result['entry_price']
            
            if result['signal_type'] == 'BUY':
                tp1_pct = ((result['tp1']/entry_price-1)*100)
                tp2_pct = ((result['tp2']/entry_price-1)*100)
                sl_pct = -((1-result['stop_loss']/entry_price)*100)
                entry_vs_current = ((entry_price/result['current_price']-1)*100)
            else:  # WAIT
                tp1_pct = ((result['tp1']/entry_price-1)*100) if entry_price > 0 else 0
                tp2_pct = ((result['tp2']/entry_price-1)*100) if entry_price > 0 else 0
                sl_pct = -((1-result['stop_loss']/entry_price)*100) if entry_price > 0 else 0
                entry_vs_current = ((entry_price/result['current_price']-1)*100)
            
            # M√†u s·∫Øc cho signal
            signal_color = Fore.GREEN if result['signal_type'] == 'BUY' else Fore.YELLOW
            
            # Trend summary
            trends_summary = f"{len([t for t in result['trends'].values() if t == 'UPTREND'])}‚Üë {len([t for t in result['trends'].values() if t == 'DOWNTREND'])}‚Üì"
            
            # Prediction accuracy - hi·ªÉn th·ªã c·∫£ latest v√† average
            pred_results = result['prediction_results']
            if pred_results['total'] > 0:
                latest_acc = pred_results['latest_accuracy']
                avg_acc = pred_results['average_accuracy']
                accuracy = f"L:{latest_acc:.0f}%|A:{avg_acc:.0f}%"
            else:
                accuracy = "NEW"
            
            table_data.append([
                f"#{i}",
                result['symbol'],
                f"{result['current_price']:.6f}",
                f"{entry_price:.6f}",
                f"{entry_vs_current:+.2f}%",
                f"{signal_color}{result['signal_type']}{Style.RESET_ALL}",
                f"{result['success_probability']:.1%}",
                result['entry_quality'],
                f"{result['rsi']:.1f}",
                trends_summary,
                f"{tp1_pct:+.2f}%",
                f"{sl_pct:+.2f}%",
                f"{result['rr_ratio']:.2f}",
                accuracy
            ])
        
        headers = [
            "Rank", "Symbol", "Current", "Entry", "Entry%", "Signal", "Probability", 
            "Quality", "RSI", "Trends", "TP1%", "SL%", "R/R", "Accuracy"
        ]
        
        return tabulate(table_data, headers=headers, tablefmt="grid")
    
    def display_prediction_history(self, results):
        """Hi·ªÉn th·ªã l·ªãch s·ª≠ d·ª± ƒëo√°n"""
        print(f"\n{Fore.MAGENTA}{Style.BRIGHT}üìà PREDICTION ACCURACY SUMMARY{Style.RESET_ALL}")
        print("=" * 80)
        
        for result in results:
            pred_results = result['prediction_results']
            if pred_results['total'] > 0:
                total = pred_results['total']
                latest_acc = pred_results['latest_accuracy']
                avg_acc = pred_results['average_accuracy']
                
                print(f"{Fore.CYAN}{result['symbol']}{Style.RESET_ALL}: "
                      f"Total: {total}, "
                      f"Latest: {Fore.GREEN if latest_acc >= 50 else Fore.RED}{latest_acc:.0f}%{Style.RESET_ALL}, "
                      f"Average: {Fore.GREEN if avg_acc >= 50 else Fore.YELLOW if avg_acc >= 30 else Fore.RED}{avg_acc:.0f}%{Style.RESET_ALL}")
    
    def run_enhanced_analysis(self):
        """Ch·∫°y ph√¢n t√≠ch n√¢ng cao"""
        self.print_header()
        
        results = []
        
        for pair in self.pairs:
            try:
                result = self.analyze_single_pair_enhanced(pair)
                if result:
                    results.append(result)
                time.sleep(1)  # Rate limit protection
            except Exception as e:
                print(f"{Fore.RED}‚ùå Error analyzing {pair}: {e}{Style.RESET_ALL}")
        
        # Sort by success probability
        results.sort(key=lambda x: x['success_probability'], reverse=True)
        
        # Display prediction history
        self.display_prediction_history(results)
        
        # Display results
        print(f"\n{Fore.CYAN}{Style.BRIGHT}üìä ANALYSIS RESULTS{Style.RESET_ALL}")
        print("=" * 140)
        print(self.create_results_table(results))
        
        # Best recommendation
        if results:
            best = results[0]
            print(f"\n{Fore.YELLOW}{Style.BRIGHT}üèÜ TOP RECOMMENDATION{Style.RESET_ALL}")
            print("-" * 60)
            print(f"{Fore.WHITE}Symbol: {Fore.CYAN}{best['symbol']}{Style.RESET_ALL}")
            print(f"{Fore.WHITE}Current Price: {Fore.YELLOW}{best['current_price']:.6f}{Style.RESET_ALL}")
            print(f"{Fore.WHITE}Entry Price: {Fore.YELLOW}{best['entry_price']:.6f}{Style.RESET_ALL}")
            print(f"{Fore.WHITE}Signal: {Fore.GREEN if best['signal_type'] == 'BUY' else Fore.RED}{best['signal_type']}{Style.RESET_ALL}")
            print(f"{Fore.WHITE}Probability: {Fore.YELLOW}{best['success_probability']:.1%}{Style.RESET_ALL}")
            print(f"{Fore.WHITE}Quality: {Fore.GREEN if best['entry_quality'] == 'HIGH' else Fore.YELLOW if best['entry_quality'] == 'MEDIUM' else Fore.RED}{best['entry_quality']}{Style.RESET_ALL}")
            print(f"{Fore.WHITE}R/R Ratio: {Fore.CYAN}{best['rr_ratio']:.2f}{Style.RESET_ALL}")
            
            # Entry vs Current v√† Trading Instructions
            if best['signal_type'] == 'BUY':
                entry_diff = ((best['entry_price']/best['current_price']-1)*100)
                tp1_pct = ((best['tp1']/best['entry_price']-1)*100)
                tp2_pct = ((best['tp2']/best['entry_price']-1)*100)
                sl_pct = ((1-best['stop_loss']/best['entry_price'])*100)
                
                print(f"{Fore.WHITE}Entry vs Current: {Fore.CYAN}{entry_diff:+.2f}%{Style.RESET_ALL}")
                print(f"{Fore.GREEN}üî∏ Entry: MUA SPOT t·∫°i {best['entry_price']:.6f}{Style.RESET_ALL}")
                print(f"{Fore.GREEN}üéØ TP1: B√ÅN 50% t·∫°i {best['tp1']:.6f} (+{tp1_pct:.2f}% l√£i){Style.RESET_ALL}")
                print(f"{Fore.GREEN}üéØ TP2: B√ÅN 50% c√≤n l·∫°i t·∫°i {best['tp2']:.6f} (+{tp2_pct:.2f}% l√£i){Style.RESET_ALL}")
                print(f"{Fore.RED}üõë SL: B√ÅN T·∫§T C·∫¢ t·∫°i {best['stop_loss']:.6f} (-{sl_pct:.2f}% l·ªó){Style.RESET_ALL}")
                
            else:  # WAIT
                entry_diff = ((best['entry_price']/best['current_price']-1)*100)
                
                print(f"{Fore.WHITE}Entry vs Current: {Fore.CYAN}{entry_diff:+.2f}%{Style.RESET_ALL}")
                print(f"{Fore.YELLOW}‚è≥ T√≠n hi·ªáu: CH·ªú TH·ªúI ƒêI·ªÇM T·ªêT H·ªöN{Style.RESET_ALL}")
                print(f"{Fore.YELLOW}üí° Ch·ªù mua t·∫°i: {best['entry_price']:.6f} (gi·∫£m {abs(entry_diff):.2f}%){Style.RESET_ALL}")
                print(f"{Fore.YELLOW}ÔøΩ Ho·∫∑c ch·ªù t√≠n hi·ªáu t·ªët h∆°n trong 15-30 ph√∫t{Style.RESET_ALL}")
            
            # Active signals
            active_signals = [k for k, v in best['signals'].items() if v]
            if active_signals:
                print(f"{Fore.WHITE}Active Signals: {Fore.MAGENTA}{', '.join(active_signals[:3])}{Style.RESET_ALL}")
            
            # Recommendation cho SPOT TRADING
            if best['signal_type'] == 'BUY':
                if best['success_probability'] > 0.75:
                    print(f"{Fore.GREEN}‚úÖ T√çN HI·ªÜU MUA M·∫†NH - Khuy·∫øn ngh·ªã mua spot{Style.RESET_ALL}")
                elif best['success_probability'] > 0.6:
                    print(f"{Fore.YELLOW}‚ö†Ô∏è  T√çN HI·ªÜU MUA V·ª™A - C√¢n nh·∫Øc mua v·ªõi volume nh·ªè{Style.RESET_ALL}")
                elif best['success_probability'] > 0.3:
                    print(f"{Fore.YELLOW}ü§î T√çN HI·ªÜU MUA Y·∫æU - Ch·ªù x√°c nh·∫≠n th√™m{Style.RESET_ALL}")
                else:
                    print(f"{Fore.RED}‚ùå T√çN HI·ªÜU MUA R·∫§T Y·∫æU - Kh√¥ng n√™n mua{Style.RESET_ALL}")
            else:  # WAIT
                print(f"{Fore.YELLOW}‚è≥ CH∆ØA C√ì C·ªö H·ªòI T·ªêT - Ch·ªù th·ªã tr∆∞·ªùng t√≠ch c·ª±c h∆°n{Style.RESET_ALL}")
                print(f"{Fore.BLUE}üí° Tip: Theo d√µi trong 15-30 ph√∫t ƒë·ªÉ t√¨m t√≠n hi·ªáu mua t·ªët{Style.RESET_ALL}")
        
        print(f"\n{Fore.BLUE}‚è∞ Analysis completed at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}{Style.RESET_ALL}")
        print(f"{Fore.GREEN}üí° Next update recommended in 15-30 minutes{Style.RESET_ALL}")
        
        return results

def main():
    try:
        app = EnhancedCryptoPredictionAppV2()
        results = app.run_enhanced_analysis()
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}üõë Analysis interrupted by user{Style.RESET_ALL}")
    except Exception as e:
        print(f"\n{Fore.RED}‚ùå Critical error: {e}{Style.RESET_ALL}")

if __name__ == "__main__":
    main()
