#!/usr/bin/env python3
"""
Auto Runner cho Crypto Prediction App
Ch·∫°y ph√¢n t√≠ch t·ª± ƒë·ªông theo chu k·ª≥
"""

import time
import schedule
from datetime import datetime
from enhanced_app_v2 import EnhancedCryptoPredictionAppV2

class AutoRunner:
    def __init__(self, interval_minutes=35):  # Thay ƒë·ªïi t·ª´ 15 th√†nh 35 ph√∫t
        self.app = EnhancedCryptoPredictionAppV2()
        self.interval_minutes = interval_minutes
        
    def run_analysis_job(self):
        """Ch·∫°y ph√¢n t√≠ch v√† l∆∞u k·∫øt qu·∫£"""
        try:
            results = self.app.run_enhanced_analysis()
        except Exception as e:
            print(f"‚ùå L·ªói trong qu√° tr√¨nh ph√¢n t√≠ch: {e}")
    
    def run_multi_timeframe_analysis_job(self):
        """Ch·∫°y ph√¢n t√≠ch ƒëa khung th·ªùi gian"""
        try:
            all_results = self.app.run_multi_timeframe_analysis()
            return all_results
        except Exception as e:
            print(f"‚ùå L·ªói trong qu√° tr√¨nh ph√¢n t√≠ch ƒëa khung th·ªùi gian: {e}")
            return None
    
    def run_single_investment_type_job(self, investment_type):
        """Ch·∫°y ph√¢n t√≠ch cho m·ªôt ki·ªÉu ƒë·∫ßu t∆∞ c·ª• th·ªÉ"""
        try:
            results = []
            for pair in self.app.pairs:
                result = self.app.analyze_single_pair_by_investment_type(pair, investment_type)
                if result:
                    results.append(result)
                time.sleep(1)
            
            results.sort(key=lambda x: x['success_probability'], reverse=True)
            return results
        except Exception as e:
            print(f"‚ùå L·ªói ph√¢n t√≠ch {investment_type}: {e}")
            return None
    
    def run_once(self):
        self.run_analysis_job()

def show_menu():
    """Hi·ªÉn th·ªã menu l·ª±a ch·ªçn"""
    print("\n" + "="*60)
    print("üöÄ CRYPTO PREDICTION APP - MENU CH√çNH")
    print("="*60)
    print("1. üìà D·ª± ƒëo√°n MUA - T√¨m coin t·ªët ƒë·ªÉ mua v√†o")
    print("2. üìâ D·ª± ƒëo√°n B√ÅN - Ph√¢n t√≠ch xu h∆∞·ªõng coin ƒëang hold")
    print("3. üö™ Tho√°t")
    print("="*60)

def show_coin_selection_menu(runner):
    """Hi·ªÉn th·ªã menu ch·ªçn coin ƒë·ªÉ ph√¢n t√≠ch b√°n"""
    print("\n" + "="*50)
    print("üí∞ CH·ªåN COIN ƒê·ªÇ PH√ÇN T√çCH XU H∆Ø·ªöNG")
    print("="*50)
    
    for i, pair in enumerate(runner.app.pairs, 1):
        print(f"{i}. {pair}")
    
    print(f"{len(runner.app.pairs) + 1}. üîô Quay l·∫°i menu ch√≠nh")
    print("="*50)

def analyze_sell_trend(runner, symbol):
    """Ph√¢n t√≠ch xu h∆∞·ªõng ƒë·ªÉ quy·∫øt ƒë·ªãnh hold hay b√°n"""
    print(f"\nüîç PH√ÇN T√çCH XU H∆Ø·ªöNG: {symbol}")
    print("="*60)
    
    timeframes = ['60m', '1h', '4h']
    trend_analysis = {}
    
    for tf in timeframes:
        print(f"üìä ƒêang ph√¢n t√≠ch khung {tf}...")
        
        if tf == '1h':
            # S·ª≠ d·ª•ng khung 4h cho ph√¢n t√≠ch
            result = runner.app.analyze_single_pair_by_investment_type(symbol, '4h')
        else:
            result = runner.app.analyze_single_pair_by_investment_type(symbol, tf)
        
        if result:
            current_price = result['current_price']
            trend_strength = result['trend_strength']
            success_prob = result['success_probability']
            tp1 = result['tp1']
            tp2 = result['tp2']
            
            # Ph√¢n t√≠ch xu h∆∞·ªõng
            if trend_strength == "STRONG_UP":
                trend_direction = "üìà TƒÇNG M·∫†NH"
                recommendation = "üîí HOLD - Ti·∫øp t·ª•c n·∫Øm gi·ªØ"
                tp_price = tp2
                tp_percent = ((tp2 / current_price - 1) * 100)
            elif "UP" in trend_strength:
                trend_direction = "üìà TƒÇNG"
                recommendation = "üîí HOLD - Ti·∫øp t·ª•c n·∫Øm gi·ªØ"
                tp_price = tp1
                tp_percent = ((tp1 / current_price - 1) * 100)
            elif trend_strength == "STRONG_DOWN":
                trend_direction = "üìâ GI·∫¢M M·∫†NH"
                recommendation = "üí∏ B√ÅN - N√™n b√°n ƒë·ªÉ c·∫Øt l·ªó"
                tp_price = current_price * 0.95  # Gi·∫£m 5%
                tp_percent = -5.0
            elif "DOWN" in trend_strength:
                trend_direction = "üìâ GI·∫¢M"
                recommendation = "üí∏ B√ÅN - C√¢n nh·∫Øc b√°n"
                tp_price = current_price * 0.97  # Gi·∫£m 3%
                tp_percent = -3.0
            else:  # MIXED, WAIT
                trend_direction = "üìä SIDEWAY"
                recommendation = "‚è≥ CH·ªú - Quan s√°t th√™m"
                tp_price = tp1
                tp_percent = ((tp1 / current_price - 1) * 100)
            
            trend_analysis[tf] = {
                'direction': trend_direction,
                'recommendation': recommendation,
                'tp_price': tp_price,
                'tp_percent': tp_percent,
                'accuracy': success_prob * 100,
                'current_price': current_price
            }
        else:
            trend_analysis[tf] = {
                'direction': "‚ùå L·ªói d·ªØ li·ªáu",
                'recommendation': "‚è≥ CH·ªú",
                'tp_price': 0,
                'tp_percent': 0,
                'accuracy': 0,
                'current_price': 0
            }
        
        time.sleep(1)
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    print(f"\nüìã K·∫æT QU·∫¢ PH√ÇN T√çCH: {symbol}")
    print("="*60)
    
    if trend_analysis['60m']['current_price'] > 0:
        print(f"üí∞ Gi√° hi·ªán t·∫°i: {trend_analysis['60m']['current_price']:.6f}")
    
    print(f"\n{'Khung':<8} {'Xu h∆∞·ªõng':<15} {'Khuy·∫øn ngh·ªã':<20} {'M·ª•c ti√™u':<12} {'T·ª∑ l·ªá':<8} {'ƒê·ªô ch√≠nh x√°c'}")
    print("-" * 75)
    
    for tf in timeframes:
        data = trend_analysis[tf]
        if data['tp_price'] > 0:
            print(f"{tf:<8} {data['direction']:<15} {data['recommendation']:<20} {data['tp_price']:<12.6f} {data['tp_percent']:>+6.2f}% {data['accuracy']:>8.1f}%")
        else:
            print(f"{tf:<8} {data['direction']:<15} {data['recommendation']:<20} {'N/A':<12} {'N/A':<8} {'N/A':>8}")
    
    # ƒê∆∞a ra khuy·∫øn ngh·ªã t·ªïng h·ª£p
    print(f"\nüéØ KHUY·∫æN NGH·ªä T·ªîNG H·ª¢P:")
    print("-" * 30)
    
    up_count = sum(1 for data in trend_analysis.values() if "TƒÇNG" in data['direction'])
    down_count = sum(1 for data in trend_analysis.values() if "GI·∫¢M" in data['direction'])
    
    if up_count >= 2:
        print("üîí HOLD - Xu h∆∞·ªõng tƒÉng tr√™n nhi·ªÅu khung th·ªùi gian")
        print("üìà C√≥ th·ªÉ tƒÉng th√™m trong th·ªùi gian t·ªõi")
    elif down_count >= 2:
        print("üí∏ B√ÅN - Xu h∆∞·ªõng gi·∫£m tr√™n nhi·ªÅu khung th·ªùi gian")
        print("üìâ N√™n c√¢n nh·∫Øc b√°n ƒë·ªÉ b·∫£o v·ªá l·ª£i nhu·∫≠n/c·∫Øt l·ªó")
    else:
        print("‚è≥ CH·ªú - Xu h∆∞·ªõng ch∆∞a r√µ r√†ng, quan s√°t th√™m")
        print("üìä Sideway, ch·ªù t√≠n hi·ªáu r√µ h∆°n")

def main():
    import sys
    
    runner = AutoRunner(interval_minutes=35)
    
    # N·∫øu c√≥ tham s·ªë d√≤ng l·ªánh, ch·∫°y nh∆∞ c≈©
    if len(sys.argv) > 1:
        if sys.argv[1] == "--auto":
            runner.start_auto_mode()
        elif sys.argv[1] == "--once":
            runner.run_once()
        elif sys.argv[1] == "--multi":
            runner.run_multi_timeframe_analysis_job()
        elif sys.argv[1] in ["--60m", "--4h", "--1d"]:
            investment_type = sys.argv[1][2:]
            runner.run_single_investment_type_job(investment_type)
        else:
            runner.run_multi_timeframe_analysis_job()
        return
    
    # Menu t∆∞∆°ng t√°c
    while True:
        show_menu()
        try:
            choice = input("\nüëâ Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n (1-3): ").strip()
            
            if choice == '1':
                print("\nüîÑ ƒêang ch·∫°y ph√¢n t√≠ch d·ª± ƒëo√°n MUA...")
                runner.run_multi_timeframe_analysis_job()
                
            elif choice == '2':
                while True:
                    show_coin_selection_menu(runner)
                    try:
                        coin_choice = input(f"\nüëâ Ch·ªçn coin (1-{len(runner.app.pairs) + 1}): ").strip()
                        
                        if coin_choice == str(len(runner.app.pairs) + 1):
                            break  # Quay l·∫°i menu ch√≠nh
                        
                        coin_index = int(coin_choice) - 1
                        if 0 <= coin_index < len(runner.app.pairs):
                            selected_coin = runner.app.pairs[coin_index]
                            analyze_sell_trend(runner, selected_coin)
                            
                            input("\nüìå Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                        else:
                            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
                            
                    except ValueError:
                        print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
                    except KeyboardInterrupt:
                        print("\nüëã T·∫°m bi·ªát!")
                        return
                        
            elif choice == '3':
                print("üëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng Crypto Prediction App!")
                break
                
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Vui l√≤ng ch·ªçn 1, 2 ho·∫∑c 3.")
                
        except KeyboardInterrupt:
            print("\nüëã T·∫°m bi·ªát!")
            break
        except Exception as e:
            print(f"‚ùå C√≥ l·ªói x·∫£y ra: {e}")

if __name__ == "__main__":
    main()
